{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/App.jsx\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport '../css/App.css';\nimport PersonalDataCard from \"../components/data-cards/PersonalDataCard\";\nimport CertDataCard from \"../components/data-cards/CertDataCard\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport CreateNewDataForm from \"../components/data-forms/CreateNewDataForm\";\nimport readMyData from \"../api-functions/my-data/readMyData\";\nimport readMyCerts from \"../api-functions/my-creds/readMyCerts\";\nimport createNewUser from \"../api-functions/my-data/createNewUser\";\nimport readMappedAttributes from \"../api-functions/my-data/readMappedAttributes\";\nimport CreateNewKeyPairForm from \"../components/data-forms/CreateNewKeyPairForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showing: \"\",\n      myData: \"secondary\",\n      creds: \"secondary\",\n      toggleAddData: false,\n      toggleAddKeyPair: false,\n      person: \"\",\n      mydata: [],\n      mycerts: [],\n      mappedAttributes: []\n    };\n    this.renderCerts = this.renderCerts.bind(this);\n    this.renderPersonalData = this.renderPersonalData.bind(this);\n    this.renderDataOrCreds = this.renderDataOrCreds.bind(this);\n    this.refreshData = this.refreshData.bind(this);\n  }\n  /**\n   * When all the components mount into the DOM, send a query to the database\n   * to get all the user's data. Sets the state to an array of user's data. \n   * @CR\n   */\n\n\n  async componentDidMount() {\n    let myDataArray = await readMyData();\n    let myCertsArray = await readMyCerts();\n    let mappedAttributesArray = await readMappedAttributes();\n    let person = \"\";\n\n    for (let item of myDataArray) {\n      if (Object.keys(item)[0] === \"Person\") {\n        person = item.Person;\n      }\n    }\n\n    if (person != \"\") {\n      this.setState({\n        mydata: myDataArray,\n        person: person,\n        mycerts: myCertsArray,\n        mappedAttributes: mappedAttributesArray\n      });\n    } else {\n      createNewUser(result => {\n        if (result.success) {\n          this.setState({\n            mydata: myDataArray,\n            person: result.person,\n            mycerts: myCertsArray,\n            mappedAttributes: mappedAttributesArray\n          });\n        }\n      });\n    }\n  }\n\n  async refreshData() {\n    this.setState({\n      mydata: []\n    });\n    let myDataArray = await readMyData();\n    this.setState({\n      mydata: myDataArray\n    });\n  }\n  /**\n   * Renders all the elements in this.state.mydata as personal Information Cards\n   * @CR\n   */\n\n\n  renderPersonalData() {\n    let personalInformation = [];\n\n    for (let item of this.state.mydata) {\n      if (Object.keys(item)[0] !== \"Person\") {\n        personalInformation.push( /*#__PURE__*/_jsxDEV(PersonalDataCard, {\n          person: this.state.person,\n          header: item.data.attribute,\n          value: item.data.value,\n          keyPairName: item.keyPairName,\n          signature: item.signature,\n          refreshData: this.refreshData\n        }, item.data.attribute + item.data.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    return personalInformation;\n  }\n  /**\n   * Renders all the elements in this.state.Cert as Cert Data Cards\n   * @CR\n   */\n\n\n  renderCerts() {\n    let certInformation = [];\n\n    for (let cert of this.state.mycerts) {\n      certInformation.push( /*#__PURE__*/_jsxDEV(CertDataCard, {\n        header: cert.keyPairName\n      }, cert.keyPairName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 34\n      }, this));\n    }\n\n    return certInformation;\n  }\n  /**\n   * Renders the Data cards or Credentials Cards depending on this.state.showing.\n   * @returns My Data or Credentials\n   */\n\n\n  renderDataOrCreds() {\n    if (this.state.showing === \"my-data\") {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-box\",\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  if (!this.state.toggleAddData) {\n                    this.setState({\n                      toggleAddData: true\n                    });\n                  } else {\n                    this.setState({\n                      toggleAddData: false\n                    });\n                  }\n                },\n                variant: \"success\",\n                style: {\n                  margin: \".5rem\"\n                },\n                children: \"Add Data +\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: async () => {\n                  this.setState({\n                    mydata: []\n                  });\n                  let myDataArray = await readMyData();\n                  this.setState({\n                    mydata: myDataArray\n                  });\n                },\n                variant: \"warning\",\n                style: {\n                  margin: \".5rem\"\n                },\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(CreateNewDataForm, {\n                person: this.state.person,\n                toggleAddData: this.state.toggleAddData,\n                certs: this.state.mycerts,\n                attributes: this.state.mappedAttributes,\n                refreshData: this.refreshData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: this.renderPersonalData()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.showing === \"creds\") {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-box\",\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  if (!this.state.toggleAddKeyPair) {\n                    this.setState({\n                      toggleAddKeyPair: true\n                    });\n                  } else {\n                    this.setState({\n                      toggleAddKeyPair: false\n                    });\n                  }\n                },\n                variant: \"success\",\n                style: {\n                  margin: \".5rem\"\n                },\n                children: \"Add Key Pair +\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: async () => {\n                  this.setState({\n                    mycerts: []\n                  });\n                  let myCertsArray = await readMyCerts();\n                  this.setState({\n                    mycerts: myCertsArray\n                  });\n                },\n                variant: \"warning\",\n                style: {\n                  margin: \".5rem\"\n                },\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(CreateNewKeyPairForm, {\n                person: this.state.person,\n                toggleAddKeyPair: this.state.toggleAddKeyPair\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: this.renderCerts()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-box\",\n            children: \"Select a tab\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        expand: \"lg\",\n        bg: \"primary\",\n        variant: \"dark\",\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          className: \"navbar-top\",\n          children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n            href: \"#home\",\n            children: \"My Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Navbar.Toggle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Navbar.Collapse, {\n            className: \"justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(Navbar.Text, {\n              children: [\"Powered By: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/I-AM-project\",\n                children: \"IAM Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          padding: \"2rem\"\n        },\n        fluid: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            padding: \".5rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            id: \"my-data-btn\",\n            variant: this.state.myData,\n            onClick: () => this.setState({\n              showing: \"my-data\",\n              myData: \"primary\",\n              creds: \"secondary\"\n            }),\n            children: \"My Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            id: \"creds-btn\",\n            variant: this.state.creds,\n            onClick: () => this.setState({\n              showing: \"creds\",\n              myData: \"secondary\",\n              creds: \"primary\"\n            }),\n            children: \"Credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), this.renderDataOrCreds()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Container","Navbar","PersonalDataCard","CertDataCard","Row","Col","Button","CreateNewDataForm","readMyData","readMyCerts","createNewUser","readMappedAttributes","CreateNewKeyPairForm","App","Component","constructor","props","state","showing","myData","creds","toggleAddData","toggleAddKeyPair","person","mydata","mycerts","mappedAttributes","renderCerts","bind","renderPersonalData","renderDataOrCreds","refreshData","componentDidMount","myDataArray","myCertsArray","mappedAttributesArray","item","Object","keys","Person","setState","result","success","personalInformation","push","data","attribute","value","keyPairName","signature","certInformation","cert","margin","render","padding"],"sources":["/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/App.jsx"],"sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport '../css/App.css'\nimport PersonalDataCard from \"../components/data-cards/PersonalDataCard\";\nimport CertDataCard from \"../components/data-cards/CertDataCard\";\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\nimport CreateNewDataForm from \"../components/data-forms/CreateNewDataForm\";\nimport readMyData from \"../api-functions/my-data/readMyData\";\nimport readMyCerts from \"../api-functions/my-creds/readMyCerts\"\nimport createNewUser from \"../api-functions/my-data/createNewUser\";\nimport readMappedAttributes from \"../api-functions/my-data/readMappedAttributes\"\n\nimport CreateNewKeyPairForm from \"../components/data-forms/CreateNewKeyPairForm\"\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            showing: \"\",\n            myData: \"secondary\",\n            creds: \"secondary\",\n            toggleAddData: false,\n            toggleAddKeyPair: false,\n            person: \"\",\n            mydata: [],\n            mycerts: [],\n            mappedAttributes: []\n        }\n\n        this.renderCerts = this.renderCerts.bind(this)\n        this.renderPersonalData = this.renderPersonalData.bind(this)\n        this.renderDataOrCreds = this.renderDataOrCreds.bind(this)\n        this.refreshData = this.refreshData.bind(this)\n    }\n\n    /**\n     * When all the components mount into the DOM, send a query to the database\n     * to get all the user's data. Sets the state to an array of user's data. \n     * @CR\n     */\n    async componentDidMount() {\n        let myDataArray = await readMyData()\n        let myCertsArray = await readMyCerts()\n        let mappedAttributesArray = await readMappedAttributes()\n        let person = \"\"\n        for (let item of myDataArray) {\n            if (Object.keys(item)[0] === \"Person\") {\n                person = item.Person\n            }\n        }\n        if (person != \"\") {\n            this.setState({ mydata: myDataArray, person: person, mycerts: myCertsArray, mappedAttributes: mappedAttributesArray })\n        } else {\n            createNewUser((result) => {\n                if (result.success) {\n                    this.setState({ mydata: myDataArray, person: result.person, mycerts: myCertsArray, mappedAttributes: mappedAttributesArray })\n                }\n            })\n        }\n\n\n    }\n\n    async refreshData() {\n        this.setState({ mydata: [] })\n        let myDataArray = await readMyData()\n        this.setState({ mydata: myDataArray })\n    }\n\n    /**\n     * Renders all the elements in this.state.mydata as personal Information Cards\n     * @CR\n     */\n    renderPersonalData() {\n        let personalInformation = []\n        for (let item of this.state.mydata) {\n            if (Object.keys(item)[0] !== \"Person\") {\n                personalInformation.push(\n                    <PersonalDataCard\n                        key={item.data.attribute + item.data.value}\n                        person={this.state.person}\n                        header={item.data.attribute}\n                        value={item.data.value}\n                        keyPairName={item.keyPairName}\n                        signature={item.signature}\n                        refreshData={this.refreshData}>\n                    </PersonalDataCard>)\n            }\n        }\n        return personalInformation\n    }\n\n    /**\n     * Renders all the elements in this.state.Cert as Cert Data Cards\n     * @CR\n     */\n    renderCerts() {\n        let certInformation = []\n        for (let cert of this.state.mycerts) {\n            certInformation.push(<CertDataCard key={cert.keyPairName} header={cert.keyPairName} ></CertDataCard>)\n        }\n        return certInformation\n    }\n\n\n\n    /**\n     * Renders the Data cards or Credentials Cards depending on this.state.showing.\n     * @returns My Data or Credentials\n     */\n    renderDataOrCreds() {\n        if (this.state.showing === \"my-data\") {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        <Container >\n                            <Button onClick={() => {\n                                if (!this.state.toggleAddData) {\n                                    this.setState({ toggleAddData: true })\n                                } else {\n                                    this.setState({ toggleAddData: false })\n                                }\n                            }}\n                                variant=\"success\"\n                                style={{ margin: \".5rem\" }}>Add Data +</Button>\n                            <Button onClick={async () => {\n                                this.setState({ mydata: [] })\n                                let myDataArray = await readMyData()\n                                this.setState({ mydata: myDataArray })\n                            }}\n                                variant=\"warning\"\n                                style={{ margin: \".5rem\" }}>Refresh</Button>\n\n\n                            <CreateNewDataForm person={this.state.person} toggleAddData={this.state.toggleAddData} certs={this.state.mycerts} attributes={this.state.mappedAttributes} refreshData={this.refreshData}></CreateNewDataForm>\n\n                            <Row >\n                                {this.renderPersonalData()}\n                            </Row>\n                        </Container>\n                    </div>\n                </Col>\n            </Row >)\n        } else if (this.state.showing === \"creds\") {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        <Container >\n                            <Button onClick={() => {\n                                if (!this.state.toggleAddKeyPair) {\n                                    this.setState({ toggleAddKeyPair: true })\n                                } else {\n                                    this.setState({ toggleAddKeyPair: false })\n                                }\n                            }}\n                                variant=\"success\"\n                                style={{ margin: \".5rem\" }}>Add Key Pair +</Button>\n                            <Button onClick={async () => {\n                                this.setState({ mycerts: [] })\n                                let myCertsArray = await readMyCerts()\n                                this.setState({ mycerts: myCertsArray })\n                            }}\n                                variant=\"warning\"\n                                style={{ margin: \".5rem\" }}>Refresh</Button>\n\n\n                            <CreateNewKeyPairForm person={this.state.person} toggleAddKeyPair={this.state.toggleAddKeyPair}></CreateNewKeyPairForm>\n\n                            <Row >\n                                {this.renderCerts()}\n                            </Row>\n                        </Container>\n                    </div>\n                </Col>\n            </Row>)\n        } else {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        Select a tab\n                    </div>\n                </Col>\n            </Row>)\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\" >\n                    <Container className=\"navbar-top\">\n                        <Navbar.Brand href=\"#home\">My Data</Navbar.Brand>\n                        <Navbar.Toggle />\n                        <Navbar.Collapse className=\"justify-content-end\">\n                            <Navbar.Text>\n                                Powered By: <a href=\"https://github.com/I-AM-project\">IAM Project</a>\n                            </Navbar.Text>\n\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                <Container style={{ padding: \"2rem\" }} fluid=\"md\">\n                    <Container style={{ padding: \".5rem\" }}>\n                        <Button id=\"my-data-btn\"\n                            variant={this.state.myData}\n                            onClick={() => this.setState({ showing: \"my-data\", myData: \"primary\", creds: \"secondary\" })}>My Data</Button>{' '}\n                        <Button id=\"creds-btn\"\n                            variant={this.state.creds}\n                            onClick={() => this.setState({ showing: \"creds\", myData: \"secondary\", creds: \"primary\" })}>Credentials</Button>{' '}\n                    </Container>\n                    {this.renderDataOrCreds()}\n                </Container>\n            </ >\n        );\n    }\n}\n\n\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}