[{"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/index.jsx":"1","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/App.jsx":"2","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/Init.jsx":"3","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-cards/PersonalDataCard.jsx":"4","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-cards/CertDataCard.jsx":"5","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-forms/CreateNewDataForm.jsx":"6","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-forms/CreateNewKeyPairForm.jsx":"7","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/readMyData.jsx":"8","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/createNewUser.jsx":"9","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/readMappedAttributes.jsx":"10","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-creds/readMyCerts.jsx":"11","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/updateMyData.jsx":"12","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/deleteMyData.jsx":"13","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/createMyData.jsx":"14","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-creds/createNewRSAKey.jsx":"15","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/getPersonIRI.jsx":"16"},{"size":542,"mtime":1658162882862,"results":"17","hashOfConfig":"18"},{"size":8502,"mtime":1658232926426,"results":"19","hashOfConfig":"18"},{"size":3841,"mtime":1658235288879,"results":"20","hashOfConfig":"18"},{"size":5420,"mtime":1657803729366,"results":"21","hashOfConfig":"18"},{"size":2211,"mtime":1657306695650,"results":"22","hashOfConfig":"18"},{"size":3397,"mtime":1657561433224,"results":"23","hashOfConfig":"18"},{"size":3205,"mtime":1657221341970,"results":"24","hashOfConfig":"18"},{"size":1063,"mtime":1658164677237,"results":"25","hashOfConfig":"18"},{"size":326,"mtime":1658234525434,"results":"26","hashOfConfig":"18"},{"size":302,"mtime":1658230008940,"results":"27","hashOfConfig":"18"},{"size":266,"mtime":1658164704381,"results":"28","hashOfConfig":"18"},{"size":659,"mtime":1658164620814,"results":"29","hashOfConfig":"18"},{"size":594,"mtime":1658164609951,"results":"30","hashOfConfig":"18"},{"size":623,"mtime":1658164605991,"results":"31","hashOfConfig":"18"},{"size":537,"mtime":1658233058107,"results":"32","hashOfConfig":"18"},{"size":314,"mtime":1658234388038,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t39c39",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/index.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/App.jsx",["87","88"],[],"import React from \"react\";\nimport Container from \"react-bootstrap/Container\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport '../css/App.css'\nimport PersonalDataCard from \"../components/data-cards/PersonalDataCard\";\nimport CertDataCard from \"../components/data-cards/CertDataCard\";\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\nimport CreateNewDataForm from \"../components/data-forms/CreateNewDataForm\";\nimport readMyData from \"../api-functions/my-data/readMyData\";\nimport readMyCerts from \"../api-functions/my-creds/readMyCerts\"\nimport createNewUser from \"../api-functions/my-data/createNewUser\";\nimport readMappedAttributes from \"../api-functions/my-data/readMappedAttributes\"\nimport getPersonIRI from \"../api-functions/my-data/getPersonIRI\"\n\nimport CreateNewKeyPairForm from \"../components/data-forms/CreateNewKeyPairForm\"\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showing: \"\",\n            myData: \"secondary\",\n            creds: \"secondary\",\n            toggleAddData: false,\n            toggleAddKeyPair: false,\n            person: \"\",\n            mydata: [],\n            mycerts: [],\n            mappedAttributes: []\n        }\n\n        this.renderCerts = this.renderCerts.bind(this)\n        this.renderPersonalData = this.renderPersonalData.bind(this)\n        this.renderDataOrCreds = this.renderDataOrCreds.bind(this)\n        this.refreshData = this.refreshData.bind(this)\n    }\n\n    /**\n     * When all the components mount into the DOM, send a query to the database\n     * to get all the user's data. Sets the state to an array of user's data. \n     * @CR\n     */\n    async componentDidMount() {\n        let personIRI = await getPersonIRI()\n        let myDataArray = await readMyData()\n        let myCertsArray = await readMyCerts()\n        let mappedAttributesArray = await readMappedAttributes()\n\n        console.log(personIRI)\n        if (personIRI.value != \"\") {\n            this.setState({ mydata: myDataArray, person: personIRI.value, mycerts: myCertsArray, mappedAttributes: mappedAttributesArray })\n        } else {\n\n\n        }\n\n    }\n\n    async refreshData() {\n        this.setState({ mydata: [] })\n        let myDataArray = await readMyData()\n        this.setState({ mydata: myDataArray })\n    }\n\n    /**\n     * Renders all the elements in this.state.mydata as personal Information Cards\n     * @CR\n     */\n    renderPersonalData() {\n        let personalInformation = []\n        for (let item of this.state.mydata) {\n            if (Object.keys(item)[0] !== \"Person\") {\n                personalInformation.push(\n                    <PersonalDataCard\n                        key={item.data.attribute + item.data.value}\n                        person={this.state.person}\n                        header={item.data.attribute}\n                        value={item.data.value}\n                        keyPairName={item.keyPairName}\n                        signature={item.signature}\n                        refreshData={this.refreshData}>\n                    </PersonalDataCard>)\n            }\n        }\n        return personalInformation\n    }\n\n    /**\n     * Renders all the elements in this.state.Cert as Cert Data Cards\n     * @CR\n     */\n    renderCerts() {\n        let certInformation = []\n        for (let cert of this.state.mycerts) {\n            certInformation.push(<CertDataCard key={cert.keyPairName} header={cert.keyPairName} ></CertDataCard>)\n        }\n        return certInformation\n    }\n\n\n\n    /**\n     * Renders the Data cards or Credentials Cards depending on this.state.showing.\n     * @returns My Data or Credentials\n     */\n    renderDataOrCreds() {\n        if (this.state.showing === \"my-data\") {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        <Container >\n                            <Button onClick={() => {\n                                if (!this.state.toggleAddData) {\n                                    this.setState({ toggleAddData: true })\n                                } else {\n                                    this.setState({ toggleAddData: false })\n                                }\n                            }}\n                                variant=\"success\"\n                                style={{ margin: \".5rem\" }}>Add Data +</Button>\n                            <Button onClick={async () => {\n                                this.setState({ mydata: [] })\n                                let myDataArray = await readMyData()\n                                this.setState({ mydata: myDataArray })\n                            }}\n                                variant=\"warning\"\n                                style={{ margin: \".5rem\" }}>Refresh</Button>\n\n\n                            <CreateNewDataForm person={this.state.person} toggleAddData={this.state.toggleAddData} certs={this.state.mycerts} attributes={this.state.mappedAttributes} refreshData={this.refreshData}></CreateNewDataForm>\n\n                            <Row >\n                                {this.renderPersonalData()}\n                            </Row>\n                        </Container>\n                    </div>\n                </Col>\n            </Row >)\n        } else if (this.state.showing === \"creds\") {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        <Container >\n                            <Button onClick={() => {\n                                if (!this.state.toggleAddKeyPair) {\n                                    this.setState({ toggleAddKeyPair: true })\n                                } else {\n                                    this.setState({ toggleAddKeyPair: false })\n                                }\n                            }}\n                                variant=\"success\"\n                                style={{ margin: \".5rem\" }}>Add Key Pair +</Button>\n                            <Button onClick={async () => {\n                                this.setState({ mycerts: [] })\n                                let myCertsArray = await readMyCerts()\n                                this.setState({ mycerts: myCertsArray })\n                            }}\n                                variant=\"warning\"\n                                style={{ margin: \".5rem\" }}>Refresh</Button>\n\n\n                            <CreateNewKeyPairForm person={this.state.person} toggleAddKeyPair={this.state.toggleAddKeyPair}></CreateNewKeyPairForm>\n\n                            <Row >\n                                {this.renderCerts()}\n                            </Row>\n                        </Container>\n                    </div>\n                </Col>\n            </Row>)\n        } else {\n            return (<Row>\n                <Col>\n                    <div className=\"data-box\">\n                        Select a tab\n                    </div>\n                </Col>\n            </Row>)\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\" >\n                    <Container className=\"navbar-top\">\n                        <Navbar.Brand href=\"#home\">My Data</Navbar.Brand>\n                        <Navbar.Toggle />\n                        <Navbar.Collapse className=\"justify-content-end\">\n                            <Navbar.Text>\n                                Powered By: <a href=\"https://github.com/I-AM-project\">IAM Project</a>\n                            </Navbar.Text>\n\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                <Container style={{ padding: \"2rem\" }} fluid=\"md\">\n                    <Container style={{ padding: \".5rem\" }}>\n                        <Button id=\"my-data-btn\"\n                            variant={this.state.myData}\n                            onClick={() => this.setState({ showing: \"my-data\", myData: \"primary\", creds: \"secondary\" })}>My Data</Button>{' '}\n                        <Button id=\"creds-btn\"\n                            variant={this.state.creds}\n                            onClick={() => this.setState({ showing: \"creds\", myData: \"secondary\", creds: \"primary\" })}>Credentials</Button>{' '}\n                    </Container>\n                    {this.renderDataOrCreds()}\n                </Container>\n            </ >\n        );\n    }\n}\n\n\n\nexport default App","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/pages/Init.jsx",["89","90","91","92"],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-cards/PersonalDataCard.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-cards/CertDataCard.jsx",["93","94","95","96","97","98","99","100"],[],"import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\"\nimport Button from \"react-bootstrap/Button\"\nimport deleteMyData from \"../../api-functions/my-data/deleteMyData\";\nimport Modal from \"react-bootstrap/Modal\"\nimport Form from \"react-bootstrap/Form\"\nimport updateMyData from \"../../api-functions/my-data/updateMyData\";\nimport Image from \"react-bootstrap/Image\"\nimport lock from '../../assets/lock.png';\nimport Container from \"react-bootstrap/Container\"\nimport Col from \"react-bootstrap/Col\"\nimport Stack from 'react-bootstrap/Stack';\n\n\n\n\nfunction ShowCredModal(props) {\n    const [show, setShow] = useState(false);\n    const [value, setValue] = useState(\"\")\n\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={handleShow}>\n                View Public Key\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Update {props.header}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                            <Form.Label>New {props.header}</Form.Label>\n\n                        </Form.Group>\n                    </Form>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nclass CertDataCard extends React.Component {\n\n    render() {\n        return (\n            <Col >\n                <Card className=\"card\" border=\"warning\" style={{ width: '15rem', margin: \"1rem\" }}>\n                    <Card.Header>{this.props.header}</Card.Header>\n\n                    <Card.Body>\n\n                        <Card.Text>\n                            <ShowCredModal></ShowCredModal>\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        )\n    }\n\n\n}\n\nexport default CertDataCard","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-forms/CreateNewDataForm.jsx",["101","102","103"],[],"import * as React from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport createMyData from \"../../api-functions/my-data/createMyData\";\n\n\n\n\nclass CreateNewDataForm extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            attribute: \"\",\n            value: \"\",\n            cert: \"\"\n        }\n        this.handleToggle = this.handleToggle.bind(this)\n        this.getCertList = this.getCertList.bind(this)\n        this.getAttributeList = this.getAttributeList.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    getAttributeList() {\n        let attrOptions = []\n        attrOptions.push(<option>Select An Attribute</option>)\n        for (let attribute of this.props.attributes) {\n            attrOptions.push(<option value={attribute}>{attribute}</option>)\n        }\n        return attrOptions\n    }\n\n    getCertList() {\n        let certOptions = []\n        certOptions.push(<option>Select A Cert</option>)\n        for (let cert of this.props.certs) {\n            certOptions.push(<option value={cert.keyPairName}>{cert.keyPairName}</option>)\n        }\n        return certOptions\n    }\n\n    async handleSubmit() {\n        if (this.state.attribute != \"Select An Attribute\" && this.state.value != \"\" && this.state.cert != \"Select A Cert\") {\n            createMyData(this.props.person, this.state.attribute, this.state.value, this.state.cert, (data) => {\n                this.props.refreshData()\n            })\n\n        } else {\n            alert(\"Fill out all the fields\")\n        }\n\n    }\n\n    handleToggle() {\n        if (this.props.toggleAddData) {\n            return <Container style={{ padding: \"1rem\", margin: \"1rem\", backgroundColor: \"white\", borderRadius: \".5rem\" }}>\n                <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>My Data Attribute</Form.Label>\n                        <Form.Select onChange={(event) => this.setState({ attribute: event.target.value })} aria-label=\"Select An Attribute\">\n                            {this.getAttributeList()}\n                        </Form.Select>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>Value</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Value\" onChange={(event) => this.setState({ value: event.target.value })} />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>Certificate</Form.Label>\n                        <Form.Select onChange={(event) => this.setState({ cert: event.target.value })} aria-label=\"Select A Cert\">\n                            {this.getCertList()}\n                        </Form.Select>\n                    </Form.Group>\n\n\n                    <Button variant=\"primary\" onClick={() => this.handleSubmit()} >\n                        Save\n                    </Button>\n                </Form>\n            </Container >\n        } else {\n            return \"\"\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.handleToggle()}\n            </div>\n        )\n    }\n}\n\nexport default CreateNewDataForm","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/components/data-forms/CreateNewKeyPairForm.jsx",["104"],[],"import * as React from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport createMyData from \"../../api-functions/my-data/createMyData\";\nimport createNewRSAKeys from \"../../api-functions/my-creds/createNewRSAKey\";\nimport Alert from \"react-bootstrap/Alert\"\n\n\n\n\n\nclass CreateNewKeyPairForm extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            passwordsNotMatch: false,\n            keyPairName: \"\",\n            passphrase: \"\",\n            confirmPassphrase: \"-1\",\n        }\n        this.handleToggle = this.handleToggle.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.passwordsNotMatchAlert = this.passwordsNotMatchAlert.bind(this)\n    }\n\n    handleSubmit() {\n        if (this.state.passphrase === this.state.confirmPassphrase) {\n            this.setState({ passwordsNotMatch: false })\n            console.log(this.props.person, this.state.keyPairName, this.state.passphrase)\n            createNewRSAKeys(this.props.person, this.state.keyPairName, this.state.passphrase)\n        } else {\n            this.setState({ passwordsNotMatch: true })\n        }\n\n    }\n\n    passwordsNotMatchAlert() {\n        if (this.state.passwordsNotMatch) {\n            return (<Alert key={\"danger\"} variant={\"danger\"}>\n                The Passwords Do Not Match\n            </Alert>)\n        } else {\n            return \"\"\n        }\n    }\n\n    handleToggle() {\n        if (this.props.toggleAddKeyPair) {\n            return <Container style={{ padding: \"1rem\", margin: \"1rem\", backgroundColor: \"white\", borderRadius: \".5rem\" }}>\n                <Form>\n                    {this.passwordsNotMatchAlert()}\n\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>Key Pair Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter Key Pair Name\" onChange={(event) => this.setState({ keyPairName: event.target.value })} />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>Passphrase Key Pair</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Enter Passphrase\" onChange={(event) => this.setState({ passphrase: event.target.value })} />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\n                        <Form.Label>Confirm Passphrase</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Enter Passphrase\" onChange={(event) => this.setState({ confirmPassphrase: event.target.value })} />\n                    </Form.Group>\n                    <Button variant=\"primary\" onClick={() => this.handleSubmit()} >\n                        Save\n                    </Button>\n                </Form>\n            </Container >\n        } else {\n            return \"\"\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.handleToggle()}\n            </div>\n\n\n        )\n    }\n}\n\nexport default CreateNewKeyPairForm","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/readMyData.jsx",["105","106","107"],[],"async function readMyData() {\n    const res = await fetch('/api/readMyData', {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application / json'\n        },\n    })\n\n    let data = await res.json()\n\n    let parsedReults = []\n\n    if (data.length !== 0) {\n        parsedReults.push({ \"Person\": data[0].Person.value })\n        for (let result of data) {\n            let dataHeader = \"\"\n            for (let attribute in result) {\n                if (attribute != \"Person\" && attribute != \"keyPairName\" && attribute != \"Signature\") {\n                    dataHeader = attribute\n                }\n            }\n            parsedReults.push({\n                data: {\n                    attribute: dataHeader,\n                    value: result[dataHeader].value\n                },\n                signature: result.Signature.value,\n                keyPairName: result.keyPairName.value\n\n            })\n        }\n    }\n    // console.log(parsedReults)\n    return parsedReults\n}\n\nexport default readMyData","/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/createNewUser.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/readMappedAttributes.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-creds/readMyCerts.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/updateMyData.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/deleteMyData.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/createMyData.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-creds/createNewRSAKey.jsx",[],[],"/home/ubuntu/Documents/Aries-storage/pds-middleware/frontend/src/api-functions/my-data/getPersonIRI.jsx",[],[],{"ruleId":"108","severity":1,"message":"109","line":13,"column":8,"nodeType":"110","messageId":"111","endLine":13,"endColumn":21},{"ruleId":"112","severity":1,"message":"113","line":54,"column":29,"nodeType":"114","messageId":"115","endLine":54,"endColumn":31},{"ruleId":"108","severity":1,"message":"116","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":19},{"ruleId":"108","severity":1,"message":"117","line":11,"column":8,"nodeType":"110","messageId":"111","endLine":11,"endColumn":24},{"ruleId":"108","severity":1,"message":"118","line":31,"column":17,"nodeType":"110","messageId":"111","endLine":31,"endColumn":24},{"ruleId":"112","severity":1,"message":"119","line":49,"column":34,"nodeType":"114","messageId":"115","endLine":49,"endColumn":36},{"ruleId":"108","severity":1,"message":"120","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":20},{"ruleId":"108","severity":1,"message":"121","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":20},{"ruleId":"108","severity":1,"message":"122","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":13},{"ruleId":"108","severity":1,"message":"123","line":9,"column":8,"nodeType":"110","messageId":"111","endLine":9,"endColumn":12},{"ruleId":"108","severity":1,"message":"124","line":10,"column":8,"nodeType":"110","messageId":"111","endLine":10,"endColumn":17},{"ruleId":"108","severity":1,"message":"125","line":12,"column":8,"nodeType":"110","messageId":"111","endLine":12,"endColumn":13},{"ruleId":"108","severity":1,"message":"126","line":19,"column":12,"nodeType":"110","messageId":"111","endLine":19,"endColumn":17},{"ruleId":"108","severity":1,"message":"127","line":19,"column":19,"nodeType":"110","messageId":"111","endLine":19,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":44,"column":34,"nodeType":"114","messageId":"115","endLine":44,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":44,"column":79,"nodeType":"114","messageId":"115","endLine":44,"endColumn":81},{"ruleId":"112","severity":1,"message":"113","line":44,"column":104,"nodeType":"114","messageId":"115","endLine":44,"endColumn":106},{"ruleId":"108","severity":1,"message":"128","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":19,"column":31,"nodeType":"114","messageId":"115","endLine":19,"endColumn":33},{"ruleId":"112","severity":1,"message":"113","line":19,"column":56,"nodeType":"114","messageId":"115","endLine":19,"endColumn":58},{"ruleId":"112","severity":1,"message":"113","line":19,"column":86,"nodeType":"114","messageId":"115","endLine":19,"endColumn":88},"no-unused-vars","'createNewUser' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'readMyCerts' is defined but never used.","'createNewRSAKeys' is defined but never used.","'newUser' is assigned a value but never used.","Expected '===' and instead saw '=='.","'deleteMyData' is defined but never used.","'updateMyData' is defined but never used.","'Image' is defined but never used.","'lock' is defined but never used.","'Container' is defined but never used.","'Stack' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'createMyData' is defined but never used."]